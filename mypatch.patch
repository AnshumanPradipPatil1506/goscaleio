diff --git a/api.go b/api.go
index 22e3bac..fed63b7 100644
--- a/api.go
+++ b/api.go
@@ -17,7 +17,8 @@ import (
 
 	log "github.com/sirupsen/logrus"
 
-	"github.com/dell/goscaleio/api"
+	"software/goscaleio/api"
+
 	types "github.com/dell/goscaleio/types/v1"
 )
 
@@ -195,6 +196,29 @@ func (c *Client) getJSONWithRetry(
 	return err
 }
 
+func (c *Client) authorizedJSONWithRetry(method string, uri string,
+	body interface{}) (interface{}, error) {
+
+	fmt.Println("authorizedJSONWithRetry\n")
+	headers := make(map[string]string)
+	headers[api.HeaderKeyAccept] = accHeader
+	headers[api.HeaderKeyContentType] = conHeader
+	// ctx context.Context,
+	// 	method, path string,
+	// 	headers map[string]string,
+	// 	body, resp interface{}
+	resp, err := c.api.DoAndGetResponseBodyAuthorized(context.Background(), method, uri, headers, body)
+	// DoAndGetResponseBody(
+	// 	ctx, method, uri, headers, body)
+
+	if err == nil {
+		return resp, nil
+	}
+
+	// fmt.Println("err----------------------------------------------------------------", err)
+	return resp, err
+}
+
 func extractString(resp *http.Response) (string, error) {
 	bs, err := ioutil.ReadAll(resp.Body)
 	if err != nil {
diff --git a/api/api.go b/api/api.go
index 106a307..5b8b36d 100644
--- a/api/api.go
+++ b/api/api.go
@@ -59,6 +59,14 @@ type Client interface {
 		headers map[string]string,
 		body interface{}) (*http.Response, error)
 
+	// DoandGetResponseBodyAuthorized sends an HTTP reqeust to the API and returns
+	// the raw response body [Already available auth token is getting used]
+	DoAndGetResponseBodyAuthorized(
+		ctx context.Context,
+		method, path string,
+		headers map[string]string,
+		body interface{}) (*http.Response, error)
+
 	// Get sends an HTTP request using the GET method to the API.
 	Get(
 		ctx context.Context,
@@ -267,7 +275,7 @@ func (c *client) DoWithHeaders(
 	return nil
 }
 
-func (c *client) DoAndGetResponseBody(
+func (c *client) DoAndGetResponseBodyAuthorized(
 	ctx context.Context,
 	method, uri string,
 	headers map[string]string,
@@ -283,6 +291,7 @@ func (c *client) DoAndGetResponseBody(
 		uriBeginsWithSlash = beginsWithSlash(uri)
 	)
 
+	fmt.Println("DoAndGetResponseBodyAuthorized\n")
 	ubf.WriteString(c.host)
 
 	if !hostEndsWithSlash && (luri > 0) {
@@ -301,7 +310,110 @@ func (c *client) DoAndGetResponseBody(
 	if err != nil {
 		return nil, err
 	}
+	fmt.Println("url    ", u, "\n")
+	fmt.Println("method    ", method, "\n")
+	var isContentTypeSet bool
+
+	// marshal the message body (assumes json format)
+	if r, ok := body.(io.ReadCloser); ok {
+		req, err = http.NewRequest(method, u.String(), r)
+		defer r.Close()
+		if v, ok := headers[HeaderKeyContentType]; ok {
+			req.Header.Set(HeaderKeyContentType, v)
+		} else {
+			req.Header.Set(
+				HeaderKeyContentType, headerValContentTypeBinaryOctetStream)
+		}
+		isContentTypeSet = true
+	} else if body != nil {
+		buf := &bytes.Buffer{}
+		enc := json.NewEncoder(buf)
+		if err = enc.Encode(body); err != nil {
+			return nil, err
+		}
+		req, err = http.NewRequest(method, u.String(), buf)
+		if v, ok := headers[HeaderKeyContentType]; ok {
+			req.Header.Set(HeaderKeyContentType, v)
+		} else {
+			req.Header.Set(HeaderKeyContentType, HeaderValContentTypeJSON)
+		}
+		isContentTypeSet = true
+	} else {
+		req, err = http.NewRequest(method, u.String(), nil)
+	}
+
+	if err != nil {
+		return nil, err
+	}
+
+	if !isContentTypeSet {
+		isContentTypeSet = req.Header.Get(HeaderKeyContentType) != ""
+	}
+
+	// add headers to the request
+	for header, value := range headers {
+		if header == HeaderKeyContentType && isContentTypeSet {
+			continue
+		}
+		req.Header.Add(header, value)
+	}
+
+	// set the auth token
+	if c.token != "" {
+		req.Header.Set("Authorization", "Bearer "+c.token)
+	}
+
+	if c.showHTTP {
+		logRequest(ctx, req, c.doLog)
+	}
+
+	// send the request
+	req = req.WithContext(ctx)
+
+	if res, err = c.http.Do(req); err != nil {
+		return nil, err
+	}
 
+	if c.showHTTP {
+		logResponse(ctx, res, c.doLog)
+	}
+
+	return res, err
+}
+func (c *client) DoAndGetResponseBody(
+	ctx context.Context,
+	method, uri string,
+	headers map[string]string,
+	body interface{}) (*http.Response, error) {
+
+	var (
+		err                error
+		req                *http.Request
+		res                *http.Response
+		ubf                = &bytes.Buffer{}
+		luri               = len(uri)
+		hostEndsWithSlash  = endsWithSlash(c.host)
+		uriBeginsWithSlash = beginsWithSlash(uri)
+	)
+
+	ubf.WriteString(c.host)
+
+	if !hostEndsWithSlash && (luri > 0) {
+		ubf.WriteString("/")
+	}
+
+	if luri > 0 {
+		if uriBeginsWithSlash {
+			ubf.WriteString(uri[1:])
+		} else {
+			ubf.WriteString(uri)
+		}
+	}
+
+	u, err := url.Parse(ubf.String())
+	if err != nil {
+		return nil, err
+	}
 	var isContentTypeSet bool
 
 	// marshal the message body (assumes json format)
diff --git a/go.mod b/go.mod
deleted file mode 100644
index 612f2a2..0000000
--- a/go.mod
+++ /dev/null
@@ -1,17 +0,0 @@
-module github.com/dell/goscaleio
-
-require (
-	github.com/google/uuid v1.3.0
-	github.com/joho/godotenv v1.4.0
-	github.com/sirupsen/logrus v1.8.1
-	github.com/stretchr/testify v1.7.0
-)
-
-require (
-	github.com/davecgh/go-spew v1.1.1 // indirect
-	github.com/pmezard/go-difflib v1.0.0 // indirect
-	golang.org/x/sys v0.0.0-20211019181941-9d821ace8654 // indirect
-	gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c // indirect
-)
-
-go 1.18
diff --git a/go.sum b/go.sum
deleted file mode 100644
index 5192997..0000000
--- a/go.sum
+++ /dev/null
@@ -1,22 +0,0 @@
-github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
-github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
-github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
-github.com/google/uuid v1.3.0 h1:t6JiXgmwXMjEs8VusXIJk2BXHsn+wx8BZdTaoZ5fu7I=
-github.com/google/uuid v1.3.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
-github.com/joho/godotenv v1.4.0 h1:3l4+N6zfMWnkbPEXKng2o2/MR5mSwTrBih4ZEkkz1lg=
-github.com/joho/godotenv v1.4.0/go.mod h1:f4LDr5Voq0i2e/R5DDNOoa2zzDfwtkZa6DnEwAbqwq4=
-github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
-github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
-github.com/sirupsen/logrus v1.8.1 h1:dJKuHgqk1NNQlqoA6BTlM1Wf9DOH3NBjQyu0h9+AZZE=
-github.com/sirupsen/logrus v1.8.1/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=
-github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
-github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=
-github.com/stretchr/testify v1.7.0 h1:nwc3DEeHmmLAfoZucVR881uASk0Mfjw8xYJ99tb5CcY=
-github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
-golang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20211019181941-9d821ace8654 h1:id054HUawV2/6IGm2IV8KZQjqtwAOo2CYlOToYqa0d0=
-golang.org/x/sys v0.0.0-20211019181941-9d821ace8654/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=
-gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
-gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c h1:dUUwHk2QECo/6vqA44rthZ8ie2QXMNeKRTHCNY2nXvo=
-gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
